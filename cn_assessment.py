# -*- coding: utf-8 -*-
"""CN assessment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S15MGdPcBVWxW3gvxWLoZi6y1kZd0blW
"""

import csv
import warnings
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from pandas.core.common import SettingWithCopyWarning

warnings.simplefilter(action="ignore", category=SettingWithCopyWarning)

plt.rcParams["figure.figsize"] = [7.50, 3.50]
plt.rcParams["figure.autolayout"] = True 

#DEFINE THE COLUMNS
headers = ['Name', 'Culture 1', 'Culture 2', 'Culture 3', 'Culture 4', 'Prod/service Design 1', 'Prod/service Design 2', 'Prod/service Design 3', 'Prod/service Design 4', 'Team 1', 'Team 2', 'Team 3', 'Team 4', 'Process 1', 'Process 2', 'Process 3', 'Process 4', 'Architecture 1', 'Architecture 2', 'Architecture 3', 'Architecture 4', 'Maintenance 1', 'Maintenance 2', 'Maintenance 3', 'Maintenance 4', 'Delivery 1', 'Delivery 2', 'Delivery 3', 'Delivery 4', 'Provisioning 1', 'Provisioning 2', 'Provisioning 3', 'Provisioning 4', 'Infrastructure 1', 'Infrastructure 2', 'Infrastructure 3', 'Infrastructure 4']

data = pd.read_csv("Cloud Native Assessment (Class A).csv", names=headers)

data = data.set_index('Name')
data

data = data.drop('Name')

#CONVERT YES AND NO TO BINARY
data = data.replace({'Yes': 1, 'No': 0})
data.fillna(0)

df1 = data[['Culture 1', 'Culture 2', 'Culture 3', 'Culture 4']]
df1['binary'] = df1['Culture 1'].astype(str) + df1['Culture 2'].astype(str) + df1['Culture 3'].astype(str) + df1['Culture 4'].astype(str)

dec1=[]

# CONVERT BINARY TO DECIMAL
for i in range(0, len(df1.index)):
    bi= df1.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec1.append(deci)


df1['Culture'] = dec1

# CULTURE
    # if 2,8,10 = Predictive (2)
    # if 5,4,1 = Iterative (3)
    # else (2.5)

cond1 = [2, 8, 10]
cond2 = [5, 4, 1]
cond3 = [2, 8, 10, 5, 4, 1]


df1.loc[df1['Culture'].isin(cond1), 'Culture'] = 2
df1.loc[df1['Culture'].isin(cond2), 'Culture'] = 3
df1.loc[df1['Culture'].isin(cond3) == False, 'Culture'] = 2.5
df1

df2 = data[['Prod/service Design 1', 'Prod/service Design 2', 'Prod/service Design 3', 'Prod/service Design 4']]
df2['binary'] = df2['Prod/service Design 1'].astype(str) + df2['Prod/service Design 2'].astype(str) + df2['Prod/service Design 3'].astype(str) + df2['Prod/service Design 4'].astype(str)

dec2=[]

for i in range(0, len(df2.index)):
    bi= df2.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec2.append(deci)


df2['Prod/Service Design'] = dec2

# PROD/SERVICE DESIGN
    # if 2,8,10 = longterm (2)
    # if 5,4,1 = Feature driven (3)
    # else (2.5)

df2.loc[df2['Prod/Service Design'].isin(cond1), 'Prod/Service Design'] = 2
df2.loc[df2['Prod/Service Design'].isin(cond2), 'Prod/Service Design'] = 3
df2.loc[df2['Prod/Service Design'].isin(cond3) == False, 'Prod/Service Design'] = 2.5
df2

df3 = data[['Team 1', 'Team 2', 'Team 3', 'Team 4']]
df3['binary'] = df3['Team 1'].astype(str) + df3['Team 2'].astype(str) + df3['Team 3'].astype(str) + df3['Team 4'].astype(str)

dec3=[]

for i in range(0, len(df3.index)):
    bi= df3.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec3.append(deci)


df3['Team'] = dec3

# TEAM
    # if 2,8,10 Hierarchy (2)
    # if 5,4,1 Cross-functionaL (3)
    # else (2.5)

df3.loc[df3['Team'].isin(cond1), 'Team'] = 2
df3.loc[df3['Team'].isin(cond2), 'Team'] = 3
df3.loc[df3['Team'].isin(cond3) == False, 'Team'] = 2.5
df3

df4 = data[['Process 1', 'Process 2', 'Process 3', 'Process 4']]
df4['binary'] = df4['Process 1'].astype(str) + df4['Process 2'].astype(str) + df4['Process 3'].astype(str) + df4['Process 4'].astype(str)

dec4=[]

for i in range(0, len(df4.index)):
    bi= df4.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec4.append(deci)


df4['Process'] = dec4

# PROCESS
    # if 2,8,10 Waterfall (2)
    # if 5,4,1 Agile (3)
    # else (2.5)

df4.loc[df4['Process'].isin(cond1), 'Process'] = 2
df4.loc[df4['Process'].isin(cond2), 'Process'] = 3
df4.loc[df4['Process'].isin(cond3) == False, 'Process'] = 2.5
df4

df5 = data[['Architecture 1', 'Architecture 2', 'Architecture 3', 'Architecture 4']]
df5['binary'] = df5['Architecture 1'].astype(str) + df5['Architecture 2'].astype(str) + df5['Architecture 3'].astype(str) + df5['Architecture 4'].astype(str)

dec5=[]

for i in range(0, len(df5.index)):
    bi= df5.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec5.append(deci)


df5['Architecture'] = dec5

# ARCHITECTURE
    # if 2,8,10 Tightly coupled Monolith (2)
    # if 5,4,1 Client server (3)
    # else (2.5)

df5.loc[df5['Architecture'].isin(cond1), 'Architecture'] = 2
df5.loc[df5['Architecture'].isin(cond2), 'Architecture'] = 3
df5.loc[df5['Architecture'].isin(cond3) == False, 'Architecture'] = 2.5
df5

df6 = data[['Maintenance 1', 'Maintenance 2', 'Maintenance 3', 'Maintenance 4']]
df6['binary'] = df6['Maintenance 1'].astype(str) + df6['Maintenance 2'].astype(str) + df6['Maintenance 3'].astype(str) + df6['Maintenance 4'].astype(str)

dec6=[]

for i in range(0, len(df6.index)):
    bi= df6.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec6.append(deci)


df6['Maintenance'] = dec6

# MAINTENANCE
    # if 2,8,10 TAdhoc monitoring (2)
    # if 5,4,1 Alerting (3)
    # else (2.5)

df6.loc[df6['Maintenance'].isin(cond1), 'Maintenance'] = 2
df6.loc[df6['Maintenance'].isin(cond2), 'Maintenance'] = 3
df6.loc[df6['Maintenance'].isin(cond3) == False, 'Maintenance'] = 2.5
df6

df7 = data[['Delivery 1', 'Delivery 2', 'Delivery 3', 'Delivery 4']]
df7['binary'] = df7['Delivery 1'].astype(str) + df7['Delivery 2'].astype(str) + df7['Delivery 3'].astype(str) + df7['Delivery 4'].astype(str)

dec7=[]

for i in range(0, len(df7.index)):
    bi= df7.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec7.append(deci)


df7['Delivery'] = dec7

# DELIVERY
    # if 2,8,10 Periodic releases (2)
    # if 5,4,1 Continuous Integration (3)
    # else (2.5)

df7.loc[df7['Delivery'].isin(cond1), 'Delivery'] = 2
df7.loc[df7['Delivery'].isin(cond2), 'Delivery'] = 3
df7.loc[df7['Delivery'].isin(cond3) == False, 'Delivery'] = 2.5
df7

df8 = data[['Provisioning 1', 'Provisioning 2', 'Provisioning 3', 'Provisioning 4']]
df8['binary'] = df8['Provisioning 1'].astype(str) + df8['Provisioning 2'].astype(str) + df8['Provisioning 3'].astype(str) + df8['Provisioning 4'].astype(str)

dec8=[]

for i in range(0, len(df8.index)):
    bi= df8.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec8.append(deci)


df8['Provisioning'] = dec8

# PROVISIONING
    # if 2,8,10  Scripted (2)
    # if 5,4,1 Config. management (3)
    # else (2.5)

df8.loc[df8['Provisioning'].isin(cond1), 'Provisioning'] = 2
df8.loc[df8['Provisioning'].isin(cond2), 'Provisioning'] = 3
df8.loc[df8['Provisioning'].isin(cond3) == False, 'Provisioning'] = 2.5
df8

df9 = data[['Infrastructure 1', 'Infrastructure 2', 'Infrastructure 3', 'Infrastructure 4']]
df9['binary'] = df9['Infrastructure 1'].astype(str) + df9['Infrastructure 2'].astype(str) + df9['Infrastructure 3'].astype(str) + df9['Infrastructure 4'].astype(str)

dec9=[]

for i in range(0, len(df9.index)):
    bi= df9.iloc[i]['binary']
    deci = int(str(bi), 2)  
    dec9.append(deci)


df9['Infrastructure'] = dec9

# INFRASTRUCTURE
#     if 2,8,10  Multiple servers (2)
#     if 5,4,1 VMs (3)
#     else (2.5)

df9.loc[df9['Infrastructure'].isin(cond1), 'Infrastructure'] = 2
df9.loc[df9['Infrastructure'].isin(cond2), 'Infrastructure'] = 3
df9.loc[df9['Infrastructure'].isin(cond3) == False, 'Infrastructure'] = 2.5
df9

result = pd.concat([df1['Culture'], df2['Prod/Service Design'], df3['Team'], df4['Process'], df5['Architecture'], df6['Maintenance'], df7['Delivery'], df8['Provisioning'], df9['Infrastructure']], axis = 1)
result

result['Culture']= result['Culture'].replace({2.0: 'Predictive', 2.5: 'B/w Predictive-Iterative', 3.0: 'Iterative'})
result['Prod/Service Design']= result['Prod/Service Design'].replace({2.0: 'Longterm Plan', 2.5: 'B/w Longterm-Feature', 3.0: 'Feature Driven'})
result['Team']= result['Team'].replace({2.0: 'Hierarchy', 2.5: 'B/w Hierarchy-CrossFunc', 3.0: 'Cross-functional Teams'})
result['Process']= result['Process'].replace({2.0: 'Waterfall', 2.5: 'B/w Waterfall-Agile', 3.0: 'Agile'})
result['Architecture']= result['Architecture'].replace({2.0: 'Tightly coupled Monolith', 2.5: 'B/w TightlyCoupled-Client Server', 3.0: 'Client server'})
result['Maintenance']= result['Maintenance'].replace({2.0: 'Adhoc monitoring', 2.5: 'B/w Adhoc-Alerting', 3.0: 'Alerting'})
result['Delivery']= result['Delivery'].replace({2.0: 'Periodic releases', 2.5: 'B/w Periodic releases-Cont. Integration', 3.0: 'Continuous Integration'})
result['Provisioning']= result['Provisioning'].replace({2.0: 'Scripted', 2.5: 'B/w Scripted-Conf. Man', 3.0: 'Config. mgmt'})
result['Infrastructure']= result['Infrastructure'].replace({2.0: 'Multiple servers', 2.5: 'Btw Multi servers-VMs', 3.0: 'VMs'})
result

m = result.mode()

result.to_csv('out_individual.csv')
m.to_csv('mode.csv')